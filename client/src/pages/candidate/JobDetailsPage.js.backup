import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { jobAPI, applicationsAPI } from '../../utils/api';
import { toast } from 'react-toastify';
import {
  Box,
  Button,
  Container,
  Grid,
  Typography,
  Card,
  CardContent,
  Chip,
  Divider,
  CircularProgress,
  Paper,
  Avatar,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
} from '@mui/material';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import WorkIcon from '@mui/icons-material/Work';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import BusinessIcon from '@mui/icons-material/Business';
import PersonIcon from '@mui/icons-material/Person';
import SchoolIcon from '@mui/icons-material/School';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import DateRangeIcon from '@mui/icons-material/DateRange';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';

const JobDetailsPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();
  
  const [job, setJob] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [applying, setApplying] = useState(false);
  const [openDialog, setOpenDialog] = useState(false);
  const [hasApplied, setHasApplied] = useState(false);
  const [applicationStatus, setApplicationStatus] = useState(null);

  // Fonction pour formater la date
  const formatDate = (date) => {
    if (!date) return 'Date non définie';
    return format(new Date(date), 'dd MMMM yyyy', { locale: fr });
  };

  useEffect(() => {
    const fetchJobDetails = async () => {
      try {
        setLoading(true);
        
        // Récupérer les détails de l'offre d'emploi
        const response = await jobAPI.getJob(id);
        console.log('Réponse API détails offre:', response);
        
        if (response && response.data) {
          const jobData = response.data.data || response.data;
          console.log('Données de l\'offre reçues:', JSON.stringify(jobData, null, 2));
          setJob(jobData);
          
          // Vérifier si l'utilisateur a déjà postulé à cette offre
          if (user) {
            try {
              // Forcer l'utilisation de l'URL de l'API Render en production
              const baseUrl = 'https://food-force-api.onrender.com';
              const url = new URL('/api/applications/candidate', baseUrl);
              console.log('URL de vérification des candidatures:', url.toString());
              
              const token = localStorage.getItem('token');
              const headers = { 'Accept': 'application/json', 'Content-Type': 'application/json' };
              if (token) headers['Authorization'] = `Bearer ${token}`;
              
              const response = await fetch(url.toString(), {
                method: 'GET',
                headers
              });
              
              if (!response.ok) {
                const textResponse = await response.text();
                console.error(`Erreur HTTP ${response.status}:`, textResponse);
                throw new Error(`Erreur HTTP: ${response.status} - ${response.statusText}`);
              }
              
              const data = await response.json();
              console.log('Réponse API candidatures:', data);
              
              const applications = data.data || data;
              const existingApplication = applications.find(app => app.job?._id === id || app.job === id);
              if (existingApplication) {
                setHasApplied(true);
                setApplicationStatus(existingApplication.status);
              }
            } catch (err) {
              console.error('Erreur lors de la vérification des candidatures:', err);
            }
          }
        } else {
          throw new Error('Format de réponse inattendu');
        }
      } catch (err) {
        console.error('Erreur lors du chargement des détails de l\'offre:', err);
        setError('Impossible de charger les détails de l\'offre. Veuillez réessayer plus tard.');
      } finally {
        setLoading(false);
      }
    };

    fetchJobDetails();
  }, [id, user]);

  const handleOpenDialog = () => {
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
  };

  const handleApply = async () => {
    try {
      setApplying(true);
      
      // Forcer l'utilisation de l'URL de l'API Render en production
      const baseUrl = 'https://food-force-api.onrender.com';
      console.log('Utilisation de l\'URL API Render:', baseUrl);
      
      const url = new URL(`/api/applications`, baseUrl);
      console.log('URL de soumission de candidature:', url.toString());
      
      const token = localStorage.getItem('token');
      const headers = { 'Accept': 'application/json', 'Content-Type': 'application/json' };
      if (token) headers['Authorization'] = `Bearer ${token}`;
      
      const response = await fetch(url.toString(), {
        method: 'POST',
        headers,
        body: JSON.stringify({
          job: id
        })
      });
      
      if (!response.ok) {
        const textResponse = await response.text();
        console.error(`Erreur HTTP ${response.status}:`, textResponse);
        throw new Error(`Erreur HTTP: ${response.status} - ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('Réponse API candidature:', data);
      
      // Notification automatique gérée par le backend
      
      toast.success('Votre candidature a été envoyée avec succès!');
      setHasApplied(true);
      setApplicationStatus('En attente');
      handleCloseDialog();
    } catch (err) {
      console.error('Erreur lors de la candidature:', err);
      toast.error(err.message || 'Erreur lors de l\'envoi de votre candidature. Veuillez réessayer.');
    } finally {
      setApplying(false);
    }
  };

  if (loading) {
    return (
      <Container maxWidth="lg" sx={{ py: 4, textAlign: 'center' }}>
        <CircularProgress size={60} />
        <Typography variant="h6" sx={{ mt: 2 }}>
          Chargement des détails de l'offre...
        </Typography>
      </Container>
    );
  }

  if (error) {
    return (
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Paper sx={{ p: 3, textAlign: 'center' }}>
          <Typography variant="h6" color="error" gutterBottom>
            {error}
          </Typography>
          <Button 
            variant="contained" 
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate(-1)}
            sx={{ mt: 2 }}
          >
            Retour
          </Button>
        </Paper>
      </Container>
    );
  }

  if (!job) {
    return (
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Paper sx={{ p: 3, textAlign: 'center' }}>
          <Typography variant="h6" gutterBottom>
            Offre d'emploi non trouvée
          </Typography>
          <Button 
            variant="contained" 
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate(-1)}
            sx={{ mt: 2 }}
          >
            Retour
          </Button>
        </Paper>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ py: 6 }}>
      <Button
        component={Link}
        to="/jobs"
        startIcon={<ArrowBackIcon />}
        sx={{ 
          mb: 4, 
          color: 'text.primary', 
          textTransform: 'none', 
          fontWeight: 500,
          '&:hover': {
            backgroundColor: 'rgba(0, 0, 0, 0.04)'
          }
        }}
      >
        Retour aux offres
      </Button>
      
      <Grid container spacing={4}>
        {/* Informations principales */}
        <Grid item xs={12} md={8}>
          <Card sx={{ 
            mb: 3, 
            borderRadius: 3, 
            boxShadow: '0 4px 20px rgba(0,0,0,0.05)', 
            overflow: 'hidden',
            transition: 'all 0.3s ease'
          }}>
            <CardContent sx={{ p: 4 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 3 }}>
                <Box>
                  <Typography variant="h4" gutterBottom sx={{ fontWeight: 600, letterSpacing: '-0.5px' }}>
                    {job.title}
                  </Typography>
                  <Typography variant="subtitle1" color="text.secondary" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
                    <BusinessIcon sx={{ fontSize: 18, mr: 1, opacity: 0.7 }} />
                    {job.sector} • <LocationOnIcon sx={{ fontSize: 18, mx: 1, opacity: 0.7 }} /> {job.location?.city || 'Non spécifié'}
                  </Typography>
                </Box>
                <Chip 
                  label={`${job.salary?.amount || ''} ${job.salary?.currency || 'MAD'}/${job.salary?.period || 'mois'}`} 
                  variant="outlined" 
                  color="secondary"
                  sx={{ fontWeight: 500 }}
                />
              </Box>
              
              <Box sx={{ mt: 3 }}>
                {hasApplied ? (
                    <Chip 
                      icon={<CheckCircleIcon />} 
                      label={`Candidature ${applicationStatus}`} 
                      color={applicationStatus === 'Acceptée' ? 'success' : applicationStatus === 'Refusée' ? 'error' : 'warning'} 
                      variant="filled" 
                      sx={{ fontWeight: 'bold', py: 0.5 }}
                    />
                  ) : (
                    <Button 
                      variant="contained" 
                      color="primary" 
                      size="large"
                      onClick={handleOpenDialog}
                      sx={{ 
                        borderRadius: '28px', 
                        textTransform: 'none', 
                        fontWeight: 500,
                        px: 3,
                        boxShadow: '0 4px 10px rgba(0,0,0,0.1)'
                      }}
                    >
                      Postuler maintenant
                    </Button>
                  )}
                </Box>
                
                <Divider sx={{ my: 3 }} />
                
                <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, color: 'text.primary', fontSize: '1.1rem' }}>
                  Description du poste
                </Typography>
                <Typography variant="body1" paragraph sx={{ whiteSpace: 'pre-line', color: 'text.secondary', lineHeight: 1.6 }}>
                  {job.description}
                </Typography>
                
                <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, color: 'text.primary', fontSize: '1.1rem', mt: 3 }}>
                  Compétences requises
                </Typography>
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 3 }}>
                  {job.requiredSkills && job.requiredSkills.length > 0 ? (
                    job.requiredSkills.map((skill, index) => (
                      <Chip 
                        key={index} 
                        label={skill} 
                        variant="outlined" 
                        sx={{ borderRadius: '16px', fontWeight: 500 }}
                      />
                    ))
                  ) : (
                    <Typography variant="body2" color="text.secondary">
                      Aucune compétence spécifique mentionnée
                    </Typography>
                  )}
                </Box>
              </CardContent>
            </Card>
            
            <Grid container spacing={3} sx={{ mt: 3 }}>
              <Grid item xs={12} sm={6}>
                <Card variant="outlined" sx={{ 
                  borderRadius: 2,
                  boxShadow: '0 2px 8px rgba(0,0,0,0.04)',
                  height: '100%'
                }}>
                  <CardContent sx={{ p: 3 }}>
                    <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, fontSize: '1rem', color: 'text.primary', mb: 2 }}>
                      Détails du contrat
                    </Typography>
                    <List dense sx={{ '& .MuiListItem-root': { py: 1.2 } }}>
                      <ListItem>
                        <ListItemIcon>
                          <WorkIcon sx={{ color: 'primary.main', opacity: 0.8 }} />
                        </ListItemIcon>
                        <ListItemText 
                          primary={<Typography variant="body2" sx={{ fontWeight: 500 }}>Type de contrat</Typography>}
                          secondary={<Typography variant="body2" color="text.secondary">{job.contractType || '-'}</Typography>}
                        />
                      </ListItem>
                      <ListItem>
                        <ListItemIcon>
                          <CalendarTodayIcon sx={{ color: 'primary.main', opacity: 0.8 }} />
                        </ListItemIcon>
                        <ListItemText 
                          primary={<Typography variant="body2" sx={{ fontWeight: 500 }}>Période de mission</Typography>}
                          secondary={
                            <Typography variant="body2" color="text.secondary">
                              {job.endDate 
                                ? `${formatDate(job.startDate)} - ${formatDate(job.endDate)}` 
                                : `Début: ${formatDate(job.startDate)}`}
                            </Typography>
                          } 
                        />
                      </ListItem>
                      <ListItem>
                        <ListItemIcon>
                          <AccessTimeIcon sx={{ color: 'primary.main', opacity: 0.8 }} />
                        </ListItemIcon>
                        <ListItemText 
                          primary={<Typography variant="body2" sx={{ fontWeight: 500 }}>Horaires de travail</Typography>}
                          secondary={<Typography variant="body2" color="text.secondary">{job.workingHours?.start ? `${job.workingHours.start} - ${job.workingHours.end || ''}` : '-'}</Typography>}
                        />
                      </ListItem>
                      <ListItem>
                        <ListItemIcon>
                          <DateRangeIcon sx={{ color: 'primary.main', opacity: 0.8 }} />
                        </ListItemIcon>
                        <ListItemText 
                          primary={<Typography variant="body2" sx={{ fontWeight: 500 }}>Jours de travail</Typography>}
                          secondary={<Typography variant="body2" color="text.secondary">{job.workingDays && job.workingDays.length > 0 ? job.workingDays.join(', ') : '-'}</Typography>}
                        />
                      </ListItem>
                    </List>
                  </CardContent>
                </Card>
              </Grid>
              
              <Grid item xs={12} sm={6}>
                <Card variant="outlined" sx={{ 
                  borderRadius: 2,
                  boxShadow: '0 2px 8px rgba(0,0,0,0.04)',
                  height: '100%'
                }}>
                  <CardContent sx={{ p: 3 }}>
                    <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, fontSize: '1rem', color: 'text.primary', mb: 2 }}>
                      Prérequis
                    </Typography>
                    <List dense sx={{ '& .MuiListItem-root': { py: 1.2 } }}>
                      <ListItem>
                        <ListItemIcon>
                          <PersonIcon sx={{ color: 'primary.main', opacity: 0.8 }} />
                        </ListItemIcon>
                        <ListItemText 
                          primary={<Typography variant="body2" sx={{ fontWeight: 500 }}>Expérience requise</Typography>}
                          secondary={<Typography variant="body2" color="text.secondary">{job.experienceLevel || '-'}</Typography>}
                        />
                      </ListItem>
                      <ListItem>
                        <ListItemIcon>
                          <SchoolIcon sx={{ color: 'primary.main', opacity: 0.8 }} />
                        </ListItemIcon>
                        <ListItemText 
                          primary={<Typography variant="body2" sx={{ fontWeight: 500 }}>Niveau d'études</Typography>}
                          secondary={<Typography variant="body2" color="text.secondary">{job.educationLevel || '-'}</Typography>}
                        />
                      </ListItem>
                      <ListItem>
                        <ListItemIcon>
                          <CalendarTodayIcon sx={{ color: 'primary.main', opacity: 0.8 }} />
                        </ListItemIcon>
                        <ListItemText 
                          primary={<Typography variant="body2" sx={{ fontWeight: 500 }}>Date limite de candidature</Typography>}
                          secondary={<Typography variant="body2" color="text.secondary">{job.applicationDeadline ? formatDate(job.applicationDeadline) : '-'}</Typography>}
                        />
                      </ListItem>
                    </List>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </Grid>
            
            {job.benefits && job.benefits.length > 0 && (
              <Box sx={{ mt: 3 }}>
                <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, fontSize: '1rem', color: 'text.primary', mb: 2 }}>
                  Avantages
                </Typography>
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                  {job.benefits.map((benefit, index) => (
                    <Chip 
                      key={index} 
                      label={benefit} 
                      variant="outlined" 
                      color="success" 
                      icon={<CheckCircleIcon />}
                      sx={{ borderRadius: '16px', fontWeight: 500 }}
                    />
                  ))}
                </Box>
              </Box>
            )}
          </Paper>
        </Grid>
        
        {/* Informations supplémentaires */}
        <Grid item xs={12} md={4}>
          <Paper sx={{ p: 3, borderRadius: 2, boxShadow: '0 4px 20px rgba(0,0,0,0.05)' }}>
            <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, fontSize: '1.1rem', color: 'text.primary', mb: 2 }}>
              Informations supplémentaires
            </Typography>
            <List dense sx={{ '& .MuiListItem-root': { py: 1.2 } }}>
              <ListItem>
                <ListItemIcon>
                  <CalendarTodayIcon sx={{ color: 'primary.main', opacity: 0.8 }} />
                </ListItemIcon>
                <ListItemText 
                  primary={<Typography variant="body2" sx={{ fontWeight: 500 }}>Date de publication</Typography>}
                  secondary={<Typography variant="body2" color="text.secondary">{formatDate(job.createdAt)}</Typography>}
                />
              </ListItem>
              <ListItem>
                <ListItemIcon>
                  <PersonIcon sx={{ color: 'primary.main', opacity: 0.8 }} />
                </ListItemIcon>
                <ListItemText 
                  primary={<Typography variant="body2" sx={{ fontWeight: 500 }}>Postes disponibles</Typography>}
                  secondary={<Typography variant="body2" color="text.secondary">{job.numberOfPositions || '1'}</Typography>}
                />
              </ListItem>
              <ListItem>
                <ListItemIcon>
                  <BusinessIcon sx={{ color: 'primary.main', opacity: 0.8 }} />
                </ListItemIcon>
                <ListItemText 
                  primary={<Typography variant="body2" sx={{ fontWeight: 500 }}>Secteur d'activité</Typography>}
                  secondary={<Typography variant="body2" color="text.secondary">{job.sector || '-'}</Typography>}
                />
              </ListItem>
            </List>
          </Paper>
        </Grid>
      </Grid>
      
      {/* Dialogue de candidature */}
      <Dialog open={openDialog} onClose={handleCloseDialog}>
        <DialogTitle>Postuler à cette offre</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Vous êtes sur le point de postuler à l'offre "{job?.title}". Confirmez-vous votre candidature ?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog} color="primary">
            Annuler
          </Button>
          <Button onClick={handleApply} color="primary" disabled={applying}>
            {applying ? <CircularProgress size={24} /> : 'Confirmer'}
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
};

export default JobDetailsPage;
